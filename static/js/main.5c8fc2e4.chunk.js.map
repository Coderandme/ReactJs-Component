{"version":3,"sources":["AutoTextCompletion.js","App.js","reportWebVitals.js","index.js"],"names":["AutoCompleteText","state","items","suggestions","text","selectedItems","onTextChanged","e","value","target","length","regex","RegExp","sort","filter","v","test","includes","push","setState","DeleteItem","item","index","indexOf","splice","list","this","items_list","map","onClick","suggestionSelected","className","onChange","type","renderSuggestions","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAgHeA,E,4MA3GPC,MAAQ,CACJC,MAAO,CACN,cACC,OACA,MACA,WACA,eACA,UACA,aACA,UACA,SACA,OACA,mBACA,eACA,kBAGFC,YAAa,GACbC,KAAM,GACNC,cAAe,I,EAKvBC,cAAgB,SAACC,GACb,IAAMC,EAAQD,EAAEE,OAAOD,MACnBL,EAAc,GAClB,GAAGK,EAAME,OAAS,EAAE,CAChB,IAAMC,EAAQ,IAAIC,OAAOJ,EAAM,KAC/BL,EAAa,EAAKF,MAAMC,MAAMW,OAAOC,QAAO,SAAAC,GAAC,OAAIJ,EAAMK,KAAKD,MAG5DZ,EAAYc,SAAST,IACjB,EAAKP,MAAMI,cAAcY,SAAST,IAClCL,EAAYe,KAAKV,GAIzB,EAAKW,UAAS,iBAAK,CAAChB,cAAaC,KAAKI,O,EAgC1CY,WAAa,SAACC,GACX,IAAIhB,EAAgB,EAAKJ,MAAMI,cAC3BH,EAAQ,EAAKD,MAAMC,MACtB,GAAGG,EAAcY,SAASI,GAAM,CAC5B,IAAIC,EAAQjB,EAAckB,QAAQF,GAClChB,EAAcmB,OAAOF,EAAO,GAC5BpB,EAAMgB,KAAKG,GAGf,EAAKF,SAAS,CACVd,cAAcA,EACdH,MAAOA,K,wDAxCf,SAAmBM,GACf,IAAIiB,EAAMC,KAAKzB,MAAMI,cACjBsB,EAAYD,KAAKzB,MAAMC,MAC3BuB,EAAKP,KAAKV,GACV,IAAIc,EAAOK,EAAWJ,QAAQf,IACf,IAAXc,GACAK,EAAWH,OAAOF,EAAO,GAE7BI,KAAKP,UAAS,iBAAO,CACjBf,KAAM,GACND,YAAa,GACbE,cAAeoB,EACfvB,MAAOyB,Q,+BAIf,WAAoB,IAAD,OACRxB,EAAeuB,KAAKzB,MAApBE,YACP,OAA0B,IAAvBA,EAAYO,OACJ,KAIP,6BACKP,EAAYyB,KAAI,SAACP,GAAD,OAAU,oBAAeQ,QAAS,kBAAK,EAAKC,mBAAmBT,IAArD,SAA6DA,GAApDA,U,oBAoBhD,WAAS,IAAD,OACGjB,EAAQsB,KAAKzB,MAAbG,KACP,OACI,sBAAK2B,UAAU,iBAAf,UACI,qBAAMA,UAAU,eAAhB,SACKL,KAAKzB,MAAMI,cAAcuB,KAAI,SAAAP,GAAI,OAC7B,sBAAKU,UAAU,cAAf,UACE,+BAAOV,IACP,cAAC,IAAD,CAASQ,QAAS,kBAAM,EAAKT,WAAWC,IAAOU,UAAU,WAFzBV,QAM5C,sBAAKU,UAAU,iBAAf,UACG,uBAAOvB,MAAOJ,EAAM4B,SAAUN,KAAKpB,cAAe2B,KAAK,SACtDP,KAAKQ,8B,GApGOC,IAAMC,WCStBC,MAVf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,cAAC,EAAD,SCKOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5c8fc2e4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './AutoCompletion.css';\r\nimport {ImCross} from 'react-icons/im';\r\n\r\nclass AutoCompleteText extends React.Component{\r\n        state = {\r\n            items: [\r\n             'JavaScript ',\r\n              'HTML',\r\n              'CSS',\r\n              'React js',\r\n              'React Native',\r\n              'Node js',\r\n              'Express js',\r\n              'MongoDB',\r\n              'Python',\r\n              'Java',\r\n              'Machine Learning',\r\n              'Data science',\r\n              'Android Studio'\r\n\r\n            ],\r\n            suggestions: [],\r\n            text: '',\r\n            selectedItems: []\r\n        }\r\n\r\n    \r\n\r\n    onTextChanged = (e)=>{\r\n        const value = e.target.value;\r\n        let suggestions = [];\r\n        if(value.length > 0){\r\n            const regex = new RegExp(value,'i');\r\n            suggestions= this.state.items.sort().filter(v => regex.test(v));\r\n        }\r\n\r\n        if(!suggestions.includes(value)){\r\n            if(!this.state.selectedItems.includes(value)){\r\n                suggestions.push(value)\r\n            }\r\n           \r\n        }\r\n        this.setState(()=>({suggestions, text:value}));\r\n    }\r\n\r\n    suggestionSelected(value){\r\n        let list= this.state.selectedItems;\r\n        let items_list= this.state.items;\r\n        list.push(value)\r\n        let index= items_list.indexOf(value)\r\n        if (index !== -1) {\r\n            items_list.splice(index, 1);\r\n          }\r\n        this.setState(() => ({\r\n            text: '',\r\n            suggestions: [],\r\n            selectedItems: list,\r\n            items: items_list\r\n        }))\r\n    }\r\n\r\n    renderSuggestions(){\r\n        const {suggestions} = this.state;\r\n        if(suggestions.length === 0){\r\n            return null;    \r\n        }\r\n\r\n        return(\r\n            <ul>\r\n                {suggestions.map((item) => <li key={item} onClick={()=> this.suggestionSelected(item)}>{item}</li>)}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    DeleteItem = (item) =>{\r\n       let selectedItems = this.state.selectedItems;\r\n       let items = this.state.items\r\n        if(selectedItems.includes(item)){\r\n            let index = selectedItems.indexOf(item)\r\n            selectedItems.splice(index, 1);\r\n            items.push(item)\r\n        }\r\n\r\n        this.setState({\r\n            selectedItems:selectedItems,\r\n            items: items\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const {text} = this.state;\r\n        return(\r\n            <div className='SearchBoxInput'>\r\n                <div  className='SelctedItems'>\r\n                    {this.state.selectedItems.map(item =>(\r\n                         <div className='SelctedItem' key={item}> \r\n                           <span>{item}</span>\r\n                           <ImCross onClick={() => this.DeleteItem(item)} className='icon' />\r\n                         </div>\r\n                    ))}\r\n                </div>\r\n               <div className='AutoCompletion'>\r\n                  <input value={text} onChange={this.onTextChanged} type='text' />\r\n                  {this.renderSuggestions()}\r\n               </div>\r\n            </div>\r\n           \r\n        )\r\n    }\r\n}\r\n\r\nexport default AutoCompleteText;","import './App.css';\nimport AutoCompleteText from './AutoTextCompletion';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='App-Component'>\n        <AutoCompleteText />\n      </div>   \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}